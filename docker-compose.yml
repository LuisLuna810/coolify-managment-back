version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile.optimized
      target: production
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      # Database
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASS=postgres123
      - DB_NAME=coolify_management
      # Redis
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      # JWT
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      # CORS
      - CORS_ORIGIN=http://localhost:3001
      # Admin user (opcional)
      - ADMIN_EMAIL=admin@example.com
      - ADMIN_PASSWORD=admin123
      - ADMIN_USERNAME=admin
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=coolify_management
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  redis_data: